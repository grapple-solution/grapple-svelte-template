---
version: '3'

vars:
  VALUES_YAML_PATH: "chart/values.yaml"
  GRAPI_INJECTION_FOLDER: "grapi"
  GRUIM_INJECTION_FOLDER: "gruim"
  BASE: "gras-deploy"
  CHART_FOLDER: "./chart"
  CHART_NAME: "gras-deploy"
  AWS_REGION: "us-east-1"
  AWS_USERNAME: "AWS"
  VERSION_FILE: "version.txt" 
  REPO_URL: "oci://public.ecr.aws/p7h7z5g3/gras"

tasks:

  patch-values-file:
    desc: Gather and encode backend (grapi) and frontend (gruim) injections 
          and update values.yaml
    cmds:
      - echo "1) Checking if values.yaml exists..."
      - |
        if [ -f "{{.VALUES_YAML_PATH}}" ]; then
          echo "values.yaml found at {{.VALUES_YAML_PATH}}"
        else
          echo "ERROR: values.yaml not found at {{.VALUES_YAML_PATH}}"
          exit 1
        fi

      - echo "2) Processing grapi injections..."
      - |
        FOLDER={{.GRAPI_INJECTION_FOLDER}}
        BASE="{{.BASE}}"  # Ensuring BASE is enclosed in quotes for full path reference
        if yq -e ".${BASE}.${FOLDER}" {{.VALUES_YAML_PATH}} >/dev/null; then
          for file_path in $(find ${FOLDER} -name "*.ts" -or \
            -name "*.sh" -or -name "*.bash"); do  
            group_name=$(echo ${file_path} | sed "s,${FOLDER}/,,g" | \
              cut -d/ -f1)
            file_name=$(echo ${file_path} | sed "s,${FOLDER}/,,g" | \
              cut -d/ -f2)
            file_extension=$(echo ${file_name##*.})
            injection_name=$(echo ${file_name} | sed \
              "s,.${group_name}.${file_extension},,g" | sed \
              "s,.${group_name::${#group_name}-1}.${file_extension},,g" | \
              sed "s,.${file_extension},,g")
            base64_content=$(cat ${file_path} | base64 -w 0)  # Base64 on single line
            if [ "${file_name}" = "index.ts" ]; then continue; fi
            echo "patching: ${FOLDER} - ${group_name} - ${injection_name} - \
              ${file_name}"
            yq -i "del(.${BASE}.${FOLDER}.${group_name}[] | \
              select(.name == \"${injection_name}\"))" {{.VALUES_YAML_PATH}}
            yq -i ".${BASE}.${FOLDER}.${group_name} += [{\"name\": \
              \"${injection_name}\", \"content\": \"${base64_content}\"}]" \
              {{.VALUES_YAML_PATH}}
          done
        else
          echo "failed to add ${FOLDER} values..."
          exit 99
        fi

      - echo "3) Processing gruim injections..."
      - |
        FOLDER={{.GRUIM_INJECTION_FOLDER}}
        BASE="{{.BASE}}"  # Ensuring BASE is enclosed in quotes for full path reference
        cm="custommodules"
        if yq -e ".${BASE}.${FOLDER}" {{.VALUES_YAML_PATH}} >/dev/null; then
          yq -i "del(.${BASE}.${FOLDER}.${cm}[])" {{.VALUES_YAML_PATH}}
          for file_path in $(find ${FOLDER}/shared -name "*.svelte"); do 
            group_name=$(echo ${file_path} | sed "s,${FOLDER}/,,g" | \
              cut -d/ -f1)
            file_name=$(echo ${file_path} | sed "s,${FOLDER}/,,g" | \
              cut -d/ -f2)
            file_extension=$(echo ${file_name##*.})
            injection_name=$(echo ${file_name} | sed \
              "s,.${group_name}.${file_extension},,g" | sed \
              "s,.${group_name::${#group_name}-1}.${file_extension},,g" | \
              sed "s,.${file_extension},,g")
            injection_name=$(echo ${file_name} | sed "s,.${file_extension},,g")
            base64_content=$(cat ${file_path} | base64 -w 0)  # Base64 on single line
            if [ "${file_name}" = "index.ts" ]; then continue; fi
            echo "patching: ${FOLDER} - ${cm} - ${injection_name} - \
              ${file_name}"
            yq -i ".${BASE}.${FOLDER}.${cm} += [{\"name\": \
              \"${injection_name}\", \"content\": \"${base64_content}\"}]" \
              {{.VALUES_YAML_PATH}}
          done
        else
          echo "failed to add ${FOLDER} values..."
          exit 99
        fi

  package-chart:
    desc: Package the Helm chart
    cmds:
      - |
        cd {{.CHART_FOLDER}}
        # Check if version file exists
        if [ ! -f "{{.VERSION_FILE}}" ]; then
          # If version file does not exist, create it with initial version 0.1.0
          echo "0.1.0" > {{.VERSION_FILE}}
        fi
        
        CURRENT_VERSION=$(cat {{.VERSION_FILE}})
        
        # Split the version into major, minor, and patch components
        IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
        
        # Increment the patch version
        patch=$((patch + 1))
        
        # If patch reaches 10, reset to 0 and increment minor version
        if [ "$patch" -ge 10 ]; then
          patch=0
          minor=$((minor + 1))
        fi
        
        # If minor reaches 10, reset to 0 and increment major version
        if [ "$minor" -ge 10 ]; then
          minor=0
          major=$((major + 1))
        fi
        
        NEW_VERSION="${major}.${minor}.${patch}"        
        echo $NEW_VERSION > {{.VERSION_FILE}}
        
        cp Chart.yaml Chart.yaml.bak

        yq e -i '.name = "{{.CHART_NAME}}"' Chart.yaml
        helm package . --version $NEW_VERSION
        
        mv Chart.yaml.bak Chart.yaml

  push-chart:
    desc: Push the packaged Helm chart to the repository
    cmds:
      - |
        cd {{.CHART_FOLDER}}
        CURRENT_VERSION=$(cat {{.VERSION_FILE}}) || ""
        aws ecr-public get-login-password \
        --region {{.AWS_REGION}} | helm registry login \
        --username {{.AWS_USERNAME}} \
        --password-stdin {{.REPO_URL}}
        helm push grpl-${CURRENT_VERSION}.tgz {{.REPO_URL}}

  deploy:
    desc: Deploy the Helm chart to the Grapple cluster
    cmds:
      - |
        cd {{.CHART_FOLDER}}
        CURRENT_VERSION=$(cat {{.VERSION_FILE}}) || ""
        helm install {{.CHART_NAME}} {{.REPO_URL}} --version ${CURRENT_VERSION} --kube-context={{.KUBE_CONTEXT}} --namespace default

  build-package-push:
    desc: Build, package, and push the Helm chart in one step
    deps:
      - patch-values-file
      - package-chart
      - push-chart